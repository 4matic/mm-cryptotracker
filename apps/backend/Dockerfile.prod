# syntax=docker/dockerfile:1.4
# Multi-stage Dockerfile for NestJS backend in Nx workspace
FROM node:20-alpine AS base

# Add metadata labels for better container management
LABEL maintainer="root@4matikku.com" \
    description="NestJS backend application for cryptocurrency tracking" \
    version="1.0"

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files from workspace root and backend app
COPY package.json package-lock.json* ./
COPY apps/backend/package.json ./apps/backend/
# Copy workspace configuration
COPY nx.json tsconfig.base.json ./
# Copy shared library package.json for dependency resolution
COPY libs/shared/graphql/package.json ./libs/shared/graphql/

# Install dependencies
RUN npm ci --omit=dev

# Install all dependencies for build (including dev deps)
FROM base AS builder-deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json* ./
# Copy shared library package.json for dependency resolution
COPY libs/shared/graphql/package.json ./libs/shared/graphql/
RUN npm ci

# Build the source code
FROM base AS builder
WORKDIR /app
COPY --from=builder-deps /app/node_modules ./node_modules
# Copy workspace configuration first
COPY nx.json tsconfig.base.json ./
# Copy shared library structure
COPY libs/shared/graphql ./libs/shared/graphql/
# Copy the entire workspace
COPY . .

# Sync the Nx workspace, build dependencies and backend app
RUN npx nx sync && npx nx build @mm-cryptotracker/backend --prod

# CLI image with dev dependencies for migrations and seeders
FROM base AS cli
WORKDIR /app

# Install all dependencies (including dev dependencies) for CLI operations
COPY package.json package-lock.json* ./
COPY apps/backend/package.json ./apps/backend/
COPY nx.json tsconfig.base.json ./
COPY libs/shared/graphql/package.json ./libs/shared/graphql/

# Install all dependencies including dev dependencies
RUN npm ci

# Copy workspace configuration and source code
COPY libs/shared/graphql ./libs/shared/graphql/
COPY . .

# Build the application for CLI operations (needed for TypeScript compilation)
RUN npx nx sync && npx nx build @mm-cryptotracker/backend --prod

# Set working directory to backend app source (not dist) for CLI operations
WORKDIR /app/apps/backend

ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --no-create-home --shell /bin/false --ingroup nodejs nestjs

USER nestjs

# Production image
FROM base AS runner
WORKDIR /app

# Install wget for healthcheck
RUN apk add --no-cache wget

ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000

# Create non-root user with no home directory and no shell for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --no-create-home --shell /bin/false --ingroup nodejs nestjs

# Copy built application and production node_modules with proper permissions
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/dist ./
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/package.json ./package.json

# Set proper file permissions for security
# RUN chmod -R 644 /app && \
#     chmod 755 /app && \
#     find /app -type d -exec chmod 755 {} \; && \
#     chmod 644 /app/main.js

USER nestjs

EXPOSE 4000

# Health check - simple wget command
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:4000/health || exit 1

CMD ["node", "main.js"]
