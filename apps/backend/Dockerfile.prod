# Multi-stage Dockerfile for NestJS backend in Nx workspace
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files from workspace root and backend app
COPY package.json package-lock.json* ./
COPY apps/backend/package.json ./apps/backend/
# Copy workspace configuration
COPY nx.json tsconfig.base.json ./
COPY libs/shared/graphql ./libs/shared/graphql

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Install all dependencies for build (including dev deps)
FROM base AS builder-deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json* ./
RUN npm ci

# Build the source code
FROM base AS builder
WORKDIR /app
COPY --from=builder-deps /app/node_modules ./node_modules
COPY . .

# Build the backend app using Nx
RUN npx nx build @mm-cryptotracker/backend --prod

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copy built application and production node_modules
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/dist ./
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/package.json ./package.json

USER nestjs

EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "const http = require('http'); \
    const options = { hostname: 'localhost', port: process.env.PORT || 4000, path: '/health', method: 'GET' }; \
    const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }); \
    req.on('error', () => process.exit(1)); \
    req.end();"

CMD ["node", "main.js"]
